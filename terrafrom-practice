
Terraform Infrastructure Setup Documentation



1. Objective

Create an Amazon EC2 instance with all prerequisite services (VPC, subnet, security group, key pair, IAM role), leveraging Terraform modules and variables to:

Keep sensitive data/configuration outside main Terraform files

Reuse infrastructure components via modules

Verify Terraform code without connecting to AWS (dry-run)

Understand module usage through a practical example



2. Initial Terraform EC2 Code Setup

Create EC2 instance resource with attached:

Key pair,  Security group,  Subnet (inside VPC),  IAM role

Sensitive data (AMI ID, instance type, IAM role) are passed as variables.

Example:

resource "aws_instance" "example" {
  ami                    = var.ami_id
  instance_type          = var.instance_type
  subnet_id              = var.subnet_id
  security_groups        = [var.security_group]
  key_name               = var.key_name
  iam_instance_profile   = var.instance_profile_name

  tags = {
    Name = "ExampleInstance"
  }
}




3. Using Variables for Sensitive Data

Variables are defined to keep the config clean and secure.

Example variable declaration in variables.tf:

variable "ami_id" {
  description = "AMI ID for EC2 instance"
  type        = string
}

variable "instance_type" {
  description = "Instance type"
  default     = "t2.micro"
}


In terraform.tfvars or environment, set actual values:

ami_id = "ami-0abcdef1234567890"




4. Verify Terraform Installation and Dry Run

Check Terraform installed:

terraform version

Dry-run to verify Terraform code (no resource creation):

terraform plan



5. AWS Credentials Error During terraform plan

Error like:

Error: No valid credential sources found


Means Terraform AWS provider tries API calls but no AWS creds found.




6. Practice Terraform Without AWS Credentials
      Option 1: terraform validate
      
      Checks syntax only, no AWS API calls.
      
      terraform validate
      
      Option 2: Comment out AWS provider, mock values
      
      Disable AWS provider to avoid connection:
      
      # provider "aws" {
      #   region = var.aws_region
      # }


Use mock/static values in variables to test config structure.

7. Terraform Modules Concept

      Modules are reusable Terraform code blocks.
      
      Helps organize and reuse code.
      
      The root config is a module.
      
      You can create child modules and call them from root.


8. Example Module: EC2 Instance

Inside modules/ec2_instance/:
###############
main.tf
###############
        resource "aws_instance" "this" {
          ami                    = var.ami_id
          instance_type          = var.instance_type
          subnet_id              = var.subnet_id
          security_groups        = var.security_groups
          key_name               = var.key_name
          iam_instance_profile   = var.iam_instance_profile
          associate_public_ip_address = true
        
          tags = var.tags
        }

#################
variables.tf
#################
        variable "ami_id" {
          type        = string
          description = "AMI ID to use for the EC2 instance"
        }
        
        variable "instance_type" {
          type        = string
          description = "EC2 instance type"
        }
        
        variable "subnet_id" {
          type        = string
          description = "Subnet ID to launch the instance in"
        }
        
        variable "security_groups" {
          type        = list(string)
          description = "List of security group names"
        }
        
        variable "key_name" {
          type        = string
          description = "Key pair name"
        }
        
        variable "iam_instance_profile" {
          type        = string
          description = "IAM instance profile name"
          default     = null
        }
        
        variable "tags" {
          type        = map(string)
          description = "Tags to assign to instance"
          default     = {}
        }
        
        
################
outputs.tf
################
        output "instance_id" {
          description = "The ID of the EC2 instance"
          value       = aws_instance.this.id
        }
        
        output "public_ip" {
          description = "Public IP address of the EC2 instance"
          value       = aws_instance.this.public_ip
        }

__________________________________________________________________________________________
Root Terraform Config Calling Module
###############
main.tf
##############
        provider "aws" {
          region = var.aws_region
        }
        
        # Assuming these are existing resources you want to pass to the module
        # Or you could create these resources here as well
        
        module "ec2_instance" {
          source              = "./modules/ec2_instance"
        
          ami_id              = var.ami_id
          instance_type       = var.instance_type
          subnet_id           = var.subnet_id
          security_groups     = var.security_groups
          key_name            = var.key_name
          iam_instance_profile= var.instance_profile_name
        
          tags = {
            Name = "MyEC2Instance"
            Env  = "dev"
          }
        }

###################
variables.tf
###################
          variable "aws_region" {
            description = "AWS region"
            default     = "us-west-2"
          }
          
          variable "ami_id" {
            description = "AMI ID for EC2 instance"
            type        = string
          }
          
          variable "instance_type" {
            description = "EC2 instance type"
            default     = "t2.micro"
          }
          
          variable "subnet_id" {
            description = "Subnet ID for EC2"
            type        = string
          }
          
          variable "security_groups" {
            description = "List of security group names"
            type        = list(string)
          }
          
          variable "key_name" {
            description = "Key pair name"
            type        = string
          }
          
          variable "instance_profile_name" {
            description = "IAM instance profile name"
            type        = string
            default     = null
          }

###################
terraform.tfvars
###################
          ami_id                = "ami-0abcdef1234567890"   # Replace with your AMI
          subnet_id             = "subnet-0abc1234def5678gh" # Replace with your subnet id
          security_groups       = ["sg-0abc1234def5678gh"]   # Replace with your SG name or id
          key_name              = "my-key-pair"
          instance_profile_name = "my-iam-instance-profile"


_____________________________________________________________________________________________
10. How to Run
          terraform init
          terraform validate
          terraform plan
          terraform apply
          terraform output

____________________________________________________________________________________________
11. Summary Table
          Topic	Key Points
          EC2 Terraform Setup	Use variables, attach SG, key, IAM, subnet
          Avoid AWS creds for dry run	Use terraform validate, comment out provider
          Modules	Reusable code blocks with variables & outputs
          Module example	EC2 instance module with input variables
          Root config	Calls module with variables

_____________________________________________________________________________________________

12. Architecture Overview & Flow
          Architecture Components
          Component	Description
          VPC	Isolated virtual network
          Subnet	Subsection of VPC to place EC2 instance
          Security Group	Controls inbound/outbound traffic
          Key Pair	SSH access to EC2 instance
          IAM Role/Profile	Permissions assigned to EC2 instance
          EC2 Instance	Virtual machine running workload
          Infrastructure Flow Diagram
          +-------------------------+
          |         Root Module     |
          |  (main.tf, variables.tf)|
          +-----------+-------------+
                      |
                      | calls
                      v
          +-------------------------+
          |     EC2 Instance Module  |
          |  (ami_id, subnet_id...)  |
          +----+----------+---------+
               |          |         
               |          | uses
               |          v
          +------------+   +----------------+   +----------------+
          |  VPC       |   | Security Group |   | IAM Role/Profile|
          |  10.0.0.0/16|   | Inbound rules |   | Permissions     |
          +------------+   +----------------+   +----------------+
               |
               v
          +-----------+
          | Subnet    |
          | 10.0.1.0/24|
          +-----------+
          
                       +-------------------+
                       |  Key Pair (SSH)   |
                       +-------------------+
          
          All combine to provision the EC2 instance.
          
          Terraform Execution Flow
          terraform init        # Initialize providers and modules
                 |
          terraform validate    # Syntax check, no AWS API call
                 |
          terraform plan        # Create execution plan (dry run)
                 |
          terraform apply       # Provision resources in AWS
                 |
          terraform output      # Display outputs like instance ID, IP
