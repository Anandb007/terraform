1.What is Terraform State?
    Terraform maintains a state file (terraform.tfstate) to keep track of the real-world infrastructure resources it manages.      
    The state file contains:
      Resource IDs
      Metadata
      Dependency graph
      Outputs and variables
    It’s crucial for Terraform’s ability to plan and apply changes correctly.

2.Why Manage Terraform State Remotely?
    By default, Terraform stores the state file locally.
    Problems with local state files:
        Not suitable for teams — multiple people working in parallel can corrupt state.
        If the local file is lost or corrupted, your Terraform workflow breaks.
        No locking or coordination mechanism.

3.Remote State Storage Using S3
    AWS S3 (Simple Storage Service) is a highly durable and scalable storage service.
    Storing the state file in an S3 bucket lets all users and CI/CD systems share the same state.
    Advantages:
        Centralized state storage.
        Highly available and durable.
        Versioning enabled to preserve past state versions.

4.Why Use DynamoDB with S3 for Terraform State?
    S3 alone doesn’t support state locking.
    Terraform uses DynamoDB to implement state locking and consistency checking.
    This prevents multiple users from running Terraform commands simultaneously and corrupting the state.

5.What is Object Locking in S3?
	Object Locking is an AWS feature to prevent an object from being deleted or overwritten for a fixed period or indefinitely.
	Helps meet compliance or retention policies.
	For Terraform state, it adds another layer of protection to avoid accidental deletion or modification.

5.The Need for State Locking:
    When multiple users or automation processes run Terraform commands at the same time, they might simultaneously read/write the state file, causing state corruption.
    Terraform supports state locking to prevent this concurrent access.

5.State File Versioning
    S3 Versioning keeps previous versions of the state file.
    Useful to roll back if corruption or mistakes occur.


Creating S3 Bucket and DynamoDB Table with Terraform (Example):
    Create a file infrastructure.tf:
    provider "aws" {
      region = "us-east-1"
    }
    resource "aws_s3_bucket" "terraform_state" {
      bucket = "my-terraform-state-bucket-123456" # Use unique name
      versioning {
        enabled = true
      }
      object_lock_configuration {
        object_lock_enabled = "Enabled"
        rule {
          default_retention {
            mode = "GOVERNANCE"
            days = 30
          }
        }
      }
    }
    resource "aws_s3_bucket_versioning" "terraform_state_versioning" {
      bucket = aws_s3_bucket.terraform_state.id
    versioning_configuration {
        status = "Enabled"
      }
    }
    resource "aws_dynamodb_table" "terraform_locks" {
      name         = "terraform-lock-table"
      billing_mode = "PAY_PER_REQUEST"
      hash_key     = "LockID"
    attribute {
        name = "LockID"
        type = "S"
      }
    }
    
    
    Explanation:
    	S3 Bucket: Versioning is enabled (to preserve old state files). Object locking is enabled with GOVERNANCE mode and 30 days retention.
    	DynamoDB Table: Used for state locking, with primary key LockID.


6.Encrypting State Files
    Enable server-side encryption (encrypt = true in backend config).
    For extra security, use KMS encryption:
        backend "s3" {
          bucket         = "my-terraform-state-bucket-123456"
          key            = "global/s3/terraform.tfstate"
          region         = "us-east-1"
          dynamodb_table = "terraform-lock-table"
          encrypt        = true
          kms_key_id     = "arn:aws:kms:us-east-1:123456789012:key/your-kms-key-id"
        }

    When Terraform saves the state file to S3:
    It uses the KMS key (you define via kms_key_id) to encrypt the object.
    The encrypted state file is stored in S3.
    When Terraform reads or writes state again, it uses the same KMS key to decrypt/encrypt it.

7.DynamoDB for State Locking:
    S3 does not provide native locking.
    AWS DynamoDB, a NoSQL key-value store, is used by Terraform to implement state locking.
    Terraform writes a lock entry to DynamoDB before modifying the state file.
    This lock prevents other users from making changes until the first operation finishes.

8.How Terraform Uses S3 and DynamoDB Together:
    Component	                    Role
    S3 Bucket	                    Stores the actual Terraform state file securely, with versioning and optionally encryption and object locking.
    DynamoDB Table	              Manages state locks to avoid concurrent changes, ensuring consistency and preventing corruption.


9.Object Locking on S3 (Extra Protection):
    AWS S3 Object Locking can be enabled on buckets to prevent accidental or malicious deletion or modification of objects (your state files).
    It works by enforcing retention periods or legal holds.
    Useful for compliance and adds an extra layer of protection for your state files.

