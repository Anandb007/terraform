
| **Step**                                          | **Command**                       | **Explanation**                                                                                                  |
| ------------------------------------------------- | --------------------------------- | ---------------------------------------------------------------------------------------------------------------- |
| **Step 1**: Create a new workspace for dev        | `terraform workspace new dev`     | Creates a new workspace named `dev` and initializes a state for it.                                              |
| **Step 2**: Select the workspace you just created | `terraform workspace select dev`  | Selects the `dev` workspace to work within. All Terraform commands will now affect the `dev` workspace state.    |
| **Step 3**: Run Terraform initialization          | `terraform init`                  | Initializes Terraform for the selected workspace. This sets up the backend, provider, etc.                       |
| **Step 4**: Apply infrastructure changes          | `terraform apply`                 | Applies changes (e.g., creating resources like EC2 instances) to the infrastructure in the `dev` workspace.      |
| **Step 5**: Create a new workspace for prod       | `terraform workspace new prod`    | Creates a new workspace named `prod` and initializes a separate state for it.                                    |
| **Step 6**: Switch to the prod workspace          | `terraform workspace select prod` | Selects the `prod` workspace to ensure you're working with prod-specific configurations and state.               |
| **Step 7**: Apply infrastructure changes          | `terraform apply`                 | Applies changes to the infrastructure in the `prod` workspace (e.g., creating a separate EC2 instance for prod). |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| **Step**                                                | **Command**                                                      | **Explanation**                                                                                                        |
| ------------------------------------------------------- | ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |
| **Initialize Terraform**                                | `terraform init`                                                 | Initializes the Terraform configuration. Downloads provider plugins, configures backend, and prepares the environment. |
| **Initialize with custom backend configuration**        | `terraform init -backend-config=backend.tf`                      | Initializes Terraform with the backend configuration specified in `backend.tf` (e.g., remote S3 + DynamoDB backend).   |
| **Plan infrastructure changes**                         | `terraform plan`                                                 | Shows what Terraform intends to do (creates, modifies, or destroys resources).                                         |
| **Apply changes to infrastructure**                     | `terraform apply`                                                | Applies the changes from the Terraform plan, creating or modifying infrastructure.                                     |
| **Create a new workspace**                              | `terraform workspace new <workspace_name>`                       | Creates a new workspace for isolating environments (e.g., `dev`, `prod`).                                              |
| **Select a workspace**                                  | `terraform workspace select <workspace_name>`                    | Switches to the specified workspace for managing the environment's state.                                              |
| **List all workspaces**                                 | `terraform workspace list`                                       | Lists all available workspaces.                                                                                        |
| **Show the current workspace**                          | `terraform workspace show`                                       | Displays the name of the current active workspace.                                                                     |
| **Delete a workspace**                                  | `terraform workspace delete <workspace_name>`                    | Deletes a workspace. You can only delete workspaces that are not currently selected.                                   |
| **List all resources**                                  | `terraform state list`                                           | Lists all resources managed in the current state.                                                                      |
| **Show resource details**                               | `terraform state show <resource_address>`                        | Shows detailed information about a specific resource in the state file.                                                |
| **Import an existing resource**                         | `terraform import <resource_type>.<resource_name> <resource_id>` | Imports an existing resource into Terraform state (useful for managing resources created outside of Terraform).        |
| **Check resource plan without applying**                | `terraform plan -out=planfile`                                   | Creates an execution plan and saves it in `planfile`, which can be applied later using `terraform apply planfile`.     |
| **Apply a saved execution plan**                        | `terraform apply planfile`                                       | Applies the changes from a previously saved execution plan (`planfile`).                                               |
| **Show changes in the plan file**                       | `terraform show planfile`                                        | Displays a human-readable version of the saved plan file (`planfile`).                                                 |
| **Destroy resources**                                   | `terraform destroy`                                              | Destroys all resources managed by the current Terraform configuration, effectively cleaning up the infrastructure.     |
| **Destroy specific resources**                          | `terraform destroy -target=<resource_address>`                   | Destroys specific resources based on the `-target` option (e.g., `terraform destroy -target=aws_instance.example`).    |
| **Refresh the state**                                   | `terraform refresh`                                              | Updates the state file by querying the infrastructure for its current state.                                           |
| **Validate configuration**                              | `terraform validate`                                             | Validates the Terraform configuration files to ensure they are syntactically correct.                                  |
| **Generate execution plan and save it**                 | `terraform plan -out=planfile`                                   | Creates a plan and saves it to a file (`planfile`), which can be applied later.                                        |
| **Generate execution plan (with a specific workspace)** | `terraform plan -workspace=prod`                                 | Generates a plan for a specific workspace (e.g., `prod`) instead of the currently selected workspace.                  |
| **Upgrade Terraform version**                           | `terraform init -upgrade`                                        | Upgrades Terraform to the latest version compatible with the current configuration.                                    |
| **Check Terraform version**                             | `terraform version`                                              | Displays the installed version of Terraform.                                                                           |
| **View the output of applied resources**                | `terraform output`                                               | Displays the output values from the Terraform configuration, such as EC2 instance IDs, IP addresses, etc.              |
| **Show Terraform state**                                | `terraform state pull`                                           | Displays the raw state file. Useful for inspecting or troubleshooting the current state.                               |
| **Remove a resource from state**                        | `terraform state rm <resource_address>`                          | Removes a resource from Terraform's state without destroying the actual resource.                                      |
| **Move a resource in state**                            | `terraform state mv <old_address> <new_address>`                 | Moves a resource in the state file, typically used when you want to rename or reorganize resources.                    |
